name: Build and Push
on:
  push:
    branches:
      - main

env:
  DOTNET_VERSION: '8.0.x'
  SERVICE_NAME: 'bottle-splitter'
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout GitHub Action'
        uses: actions/checkout@v4

      - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build
        run:  dotnet run --project build/build.csproj

      - name: Upgrade AWS CLI version and setup lightsailctl
        run: |
          aws --version
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
          which aws
          aws --version
          sudo curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "/usr/local/bin/lightsailctl"
          sudo chmod +x /usr/local/bin/lightsailctl

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{secrets.AWS_SECRET_KEY}}
        
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
  
      - name: Create Build and Tag
        env:
          IMAGE_SHA_TAG: ${{ github.sha }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bottle-splitter
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA_TAG

      - name: Push the Docker Image to lightsail
        env: 
          IMAGE_SHA_TAG: ${{ github.sha }}
          IMAGE_URL: ${{ steps.login-ecr.outputs.registry }}/${{env.SERVICE_NAME}}:${{ github.sha }}
        run: >
          aws lightsail push-container-image
          --service-name ${{env.SERVICE_NAME}}
          --image $IMAGE_URL
          --region eu-west-2
          --label git-push      

      - name: Save updated LIGHTSAIL_IMAGE_TAG 
        run: |
          echo "LIGHTSAIL_DOCKER_IMAGE=$(aws lightsail get-container-images --service-name ${{ env.SERVICE_NAME }} --region eu-west-2 | jq -r .containerImages[0].image)"  >> $GITHUB_ENV
        
      - name: Start New Deployment to Light Sail
        run: |
          aws lightsail create-container-service-deployment  --region us-east-2 \
          --service-name ${{env.SERVICE_NAME}} \
          --output yaml \
          --containers "{
            \"${{env.SERVICE_NAME}}\": {
              \"image\": \"$LIGHTSAIL_DOCKER_IMAGE\",
              \"environment\": {
                  \"VERSION\": \"${{github.run_number}}\"
                },
              \"ports\": {
                \"5000\": \"HTTP\"
              }
            }
          }" \
          --public-endpoint "{
            \"containerName\": \"${{env.SERVICE_NAME}}\",
            \"containerPort\": 5000,
            \"healthCheck\": {
              \"path\": \"/healthcheck/liveness\",
              \"intervalSeconds\": 10
            }
          }"      
      - name: Push the Docker Image to lightsail
        env: 
          IMAGE_SHA_TAG: ${{ github.sha }}
          IMAGE_URL: ${{ steps.login-ecr.outputs.registry }}/${{env.SERVICE_NAME}}:${{ github.sha }}
        run: >
          aws lightsail push-container-image
          --service-name ${{ env.SERVICE_NAME }}
          --image $IMAGE_URL
          --region us-east-2
          --label git-push