@page "/add-split"
@attribute [Authorize]
@inject ISplitManager SplitManager;
@inject INavigationService NavigationService
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider;

@using System.Diagnostics.CodeAnalysis
@using System.Security.Claims
@using BottleSplitter.Infrastructure
@using BottleSplitter.Model
@using BottleSplitter.Services
@using FluentValidation
@using Microsoft.AspNetCore.Authorization
@using Narochno.Primitives

<PageTitle>Add a New Bottle Split</PageTitle>

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add a New Bottle Split</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudForm Model="@_model" @ref="@_form" Validation="@(_modelValidator.ValidateValue)" ValidationDelay="0">
            <MudStack>
                <MudTextField Label="Bottle Split name"
                              @bind-Value="_model.Name" For="@(() => _model.Name)"/>
                <MudSpacer />
                <MudTextField Label="Description" HelperText="Optional Description of the split" Class="mt-3"
                              @bind-Value="_model.Settings.Description" For="@(() => _model.Settings.Description)"/>
                <MudTextField Label="Details Url" HelperText="Optional Url that describes the bottle (e.g. Whiskybase)" Class="mt-3"
                              @bind-Value="_model.Settings.DetailsUrl" For="@(() => _model.Settings.DetailsUrl)"/>
                <MudTextField Label="Image Url" HelperText="Optional" Class="mt-3"
                              @bind-Value="_model.Settings.ImageUrl" For="@(() => _model.Settings.ImageUrl)"/>
                <MudSpacer />
                <MudText>Split Sizes</MudText>
                <MudNumericField Label="Total Available" HelperText="Milliliters" Class="mt-3"
                                 @bind-Value="_model.Settings.TotalAvailable" For="@(() => _model.Settings.TotalAvailable)"/>
                <MudChipSet AllClosable="true" OnClose="Closed">
                    @foreach (var value in _model.Settings.Sizes)
                    {
                        <MudChip Text="@(value + " (ml)")"></MudChip>
                    }
                </MudChipSet>
                <MudStack Row="true">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="Add"></MudIconButton>
                    <MudNumericField @ref="_numericField" T="int" Label="Size to add" HelperText="Milliliters" Class="mt-3"/>
                </MudStack>
            </MudStack>
        </MudForm>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@_disabled" Class="ml-auto" OnClick="@(async () => await Submit())">Add</MudButton>
    </MudCardActions>
</MudCard>

@code {
    private readonly BottleSplit _model = new ();
    private bool _disabled;
    private ClaimsPrincipal? _splitterUser;

    [SuppressMessage("ReSharper", "NullableWarningSuppressionIsUsed")]
    private MudNumericField<int> _numericField = default!;
    [SuppressMessage("ReSharper", "NullableWarningSuppressionIsUsed")]
    MudForm _form = default!;

    protected override async Task OnInitializedAsync()
    {
        var state = await CustomAuthenticationStateProvider.GetAuthenticationStateAsync();
        _splitterUser = state.User;
    }

    readonly BottleSplitFluentValidator _modelValidator = new ();

    public void Add()
    {
        if (!_model.Settings.Sizes.Contains(_numericField.Value))
        {
            _model.Settings.Sizes.Add(_numericField.Value);
        }
    }

    public void Closed(MudChip chip) => _model.Settings.Sizes.Remove(int.Parse(chip.Text.Split(" ")[0]));

    private async Task Submit()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            _disabled = true;
            await SplitManager.CreateSplit((_splitterUser?.GetId()).NotNull(), _model);
            NavigationService.GoToSplits();
        }
    }

    public class BottleSplitFluentValidator : AbstractValidator<BottleSplit>
    {
        public BottleSplitFluentValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty()
                .Length(1,100);
            RuleFor(x => x.Settings).NotNull();

            RuleFor(x => x.Settings.DetailsUrl)
                .Url();

            RuleFor(x => x.Settings.ImageUrl)
                .Url();
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<BottleSplit>.CreateWithOptions((BottleSplit)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

}
