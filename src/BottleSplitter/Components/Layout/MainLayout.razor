@using BottleSplitter.Infrastructure
@inherits LayoutComponentBase

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme"/>

<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        My Application
        <MudSwitch @bind-Value="@_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Toggle Light/Dark Mode"/>
    </MudAppBar>
    <MudDrawer Open="@_drawerOpen">
        <MudNavMenu>
            <MudNavLink Href="/" Match="NavLinkMatch.All">Home</MudNavLink>
         @if (_authenticated)
            {
                <MudNavLink Href="/account" Match="NavLinkMatch.Prefix">Account</MudNavLink>
                <MudNavLink Href="/logout" Match="NavLinkMatch.Prefix">Logout</MudNavLink>

            }
            <MudNavLink Href="/challenge/github" Match="NavLinkMatch.Prefix">Login via Github</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private MudTheme _theme = new();
    private bool _isDarkMode;
    bool _drawerOpen = true;
    private bool _authenticated;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        _authenticated = (await CustomAuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity?.IsAuthenticated ?? false;
    }

    [Inject]
    public CustomAuthenticationStateProvider CustomAuthenticationStateProvider { get; set; } = default!;
}
