@using System.Diagnostics.CodeAnalysis
@using BottleSplitter.Infrastructure
@using BottleSplitter.Services
@inherits LayoutComponentBase
@inject IPreferencesService PreferencesService

<MudThemeProvider @bind-IsDarkMode="@PreferencesService.DarkMode" Theme="_theme"/>

<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar>
        <MudMenu Icon="@Icons.Material.Filled.Menu">
            <MudMenuItem  Href="/">Home</MudMenuItem>
            @if (_authenticated)
            {
                <MudMenuItem  Href="/account">Account</MudMenuItem>
                <MudMenuItem  Href="/logout">Logout</MudMenuItem>
            }
            else
            {
                <MudMenuItem Href="/challenge/github">Login via Github</MudMenuItem>
            }
        </MudMenu>
        Bottle Splitter!
        <MudSwitch ValueChanged="Callback" Value="@PreferencesService.DarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Toggle Light/Dark Mode"/>
    </MudAppBar>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Medium">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private MudTheme _theme = new();
    private bool _authenticated;

    protected override async Task OnInitializedAsync()
    {
        _authenticated = (await CustomAuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity?.IsAuthenticated ?? false;
        await PreferencesService.Load();
    }

    [Inject]
    [SuppressMessage("ReSharper", "NullableWarningSuppressionIsUsed")]
    public CustomAuthenticationStateProvider CustomAuthenticationStateProvider { get; set; } = default!;

    private async Task Callback(bool val)
    {
        PreferencesService.DarkMode = val;
        await PreferencesService.Save();
    }

}
